varying vec4 eyePosition;
varying vec3 normal;
varying vec3 diffuseColor;
varying vec3 specularColor;
varying vec3 emissiveColor;
varying vec3 ambientColor;
varying float shininess;
varying vec4 omg_color;
varying vec3 light_position;

varying float color;
void main()
{
    const vec3 lightColor = vec3( 1, 1, 1 );
    const vec3 globalAmbient = vec3( 0.2, 0.2, 0.2 );
    vec3 P = vec3( eyePosition );
    vec3 N = normalize( normal );
    vec3 emissive = emissiveColor;
    vec3 ambient = ambientColor * globalAmbient;
    vec3 L = normalize( light_position - P );
    float diffuseLight = max( dot( N, L ), 0.0 );
    vec3 diffuse = diffuseColor * lightColor * diffuseLight;
// Compute the specular term
    vec3 V = normalize( -P );
    vec3 H = normalize( L + V );
    float specularLight = pow( max( dot( N, H ), 0.0 ), shininess );
    if( diffuseLight <= 0.0 )
    {
        specularLight = 0.0;
    }
    vec3 specular = specularColor * lightColor * specularLight;
    gl_FragColor.xyz = emissive + ambient + diffuse + specular;
    gl_FragColor.w = omg_color.w;
    
}